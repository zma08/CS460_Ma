using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using PagedList;
using PagedList.Mvc;
using System.Diagnostics;

namespace PiratesWeb.Controllers
{
    public class PSController : Controller
    {

        PiratesContext db = new PiratesContext();
        /// <summary>
        /// show all the pirates record in the database
        /// </summary>
        /// <param name="page">current page number used by pagelist and pagelistmvc</param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult ShowPirates(int? page)
        {

            return View(db.Pirates.ToList().ToPagedList(page ?? 1, 3));//the nullable page defualt will be set as 1 and page size is 3 since 3 record will be showed in each page
        }

        [HttpGet]
        public ActionResult CreatePirates()
        {
            return View();
        }
        /// <summary>
        /// new pirate which is created by the binder will be added to database if pass thru the validation the Add statement generated by saveChanges method 
        /// </summary>
        /// <param name="pirate"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreatePirates(Pirate pirate)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    db.Pirates.Add(pirate);
                    db.SaveChanges();
                    return RedirectToAction("ShowPirates");
                }
                catch (Exception) { ModelState.AddModelError("", "Pirate has not been added"); }
            }
            return View(pirate);
        }
        /// <summary>
        /// list all the ships
        /// </summary>
        /// <returns></returns>
        public ActionResult ShowShips()
        {
            return View(db.Ships.ToList());
        }
        /// <summary>
        /// list all the crew
        /// </summary>
        /// <returns></returns>
        public ActionResult ShowCrew()
        {
            return View(db.Crews.ToList());
        }
        [HttpGet]
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Pirate pirate = db.Pirates.Find(id);
            if (pirate == null)
            {
                return HttpNotFound();
            }
            return View(pirate);

        }
        /// <summary>
        /// pass the id and entity that binder created and savechanges method will generate a update statement to updaate the database if failed then the ModelState will call addModelerror 
        /// </summary>
        /// <param name="id">pirate id for searching the entity which is going to be updated</param>
        /// <param name="pirate"></param>
        /// <param name="Date">property of the pirate</param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult Edit(int? id, Pirate pirate, DateTime Date)
        {
            if (id == null)  return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            //if (System.DateTime.Now < Date) { return new HttpStatusCodeResult(HttpStatusCode.BadRequest); return View("ShowPirates"); }
          
            Pirate p = db.Pirates.Find(id);
            if (TryUpdateModel(p, "", new string[] { "Name", "Date" }))
            {
                try
                {
                    db.SaveChanges();
                    return RedirectToAction("ShowPirates");
                }
                catch (Exception) { ModelState.AddModelError("","Edit failed"); }
            }
            return View(p);
        }
        /// <summary>
        /// show all attributes of a entity that the user is looking for with the specific id which is nullable
        /// if the entity is not exist then return either bad request or http not found
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Pirate pirate = db.Pirates.FirstOrDefault(x => x.Id == id);
            if (pirate == null)
            {
                return HttpNotFound();
            }

            return View(pirate);

        }
        /// <summary>
        /// display the form for pirate deletion with nullable id key
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Pirate pirate = db.Pirates.Find(id);
            if (pirate == null)
            {
                return HttpNotFound();
            }

            return View(pirate);
        }
        /// <summary>
        /// modle binder create the entity by the form user input,saveChanges issued a delete statement
        /// </summary>
        /// <param name="id"></param>
        /// <param name="pirate"></param>
        /// <returns>to the view with entity pirate</returns>
        [HttpPost]
        public ActionResult Delete(int? id, Pirate pirate)
        {
            try
            {
                Pirate p = db.Pirates.Find(id);
                db.Pirates.Remove(p);
                db.SaveChanges();
                return RedirectToAction("ShowPirates");
            }
            catch (Exception) { ModelState.AddModelError("","deletion failed"); }
            return View(pirate);
        }

        /// <summary>
        /// loop thru the entities in the Pirates and crew found the total of booty value
        /// </summary>
        /// <returns></returns>
        public ActionResult Booty()
        {
            
            List<dynamic> list = new List<dynamic>();
            decimal bootyTotal = 0;
            foreach( var p in db.Pirates.ToList())
            {
                foreach(var c in db.Crews.Where(x=>x.PirateId==p.Id).ToList())
                {
                    bootyTotal += c.Booty;
                }
                var info = new
                {
                    pirate = p.Name,
                    booty = bootyTotal
                };
                list.Add(info);                
            }
            var sorted = list.OrderByDescending(x => x.booty).ToList();
            return Json(sorted,JsonRequestBehavior.AllowGet);
           
          
        }

        /// <summary>
        /// dispose the connection to the database
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }

    }
}